#+title: Hello
#+hugo_base_dir: /home/kdb/Documents/github/owlglass
#+hugo_auto_set_lastmod: t
#+options: H:2
#+HUGO_SECTION: computer-science/programming-languages/haskell
#+hugo_weight: 1


* The Basics
** Hello

Begin with a simple hello world program cite:kurt2018get:
#+begin_src haskell -n -r :tangle hello.hs
--hello.hs : first haskell file                                                                                                                                 
main = do
  print "Hello World!"
#+end_src


Compile the code by passing *hello.hs* to GHC as an argument:
#+begin_src shell -n :exports both :results output verbatim
ghc hello.hs                                                                                              
#+end_src

Thus GHC has created three files: *hello*, the binary executable, along with hello.hi and hello.o.  The binary can be executed from the command line:
#+begin_src shell -n :exports both :results output verbatim
./hello                                                                                                    
#+end_src

** Messy Main
To gain some intuition for the structure of Haskell programs, we introduce messyMain, which defies the good practice of writing modular code:
#+begin_src haskell -n :tangle messyMain.hs
--messyMain.hs : an example to fix
main :: IO()
main = do
    print "Who is the email for?"
    recipient <- getLine
    print "What is the Title?"
    title <- getLine
    print "Who is the Author?"
    author <- getLine
    print ("Dear " ++ recipient ++ ", \n" ++
          "Thanks for buying " ++ title ++ "\nthanks, \n" ++
          author )
#+end_src


